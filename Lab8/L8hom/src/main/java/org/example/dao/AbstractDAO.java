package org.example.dao;

import org.example.model.AbstractEntity;
import org.example.util.ConnectionDB;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
public abstract class AbstractDAO<T extends AbstractEntity> {

    protected abstract String getTableName();

    protected abstract T mapResultSetToModel(ResultSet resultSet) throws SQLException;

    public void create(T object) throws SQLException {
        Connection connection = ConnectionDB.getConnection();
        try (PreparedStatement preparedStatement = connection.prepareStatement(
                createInsertQuery(), Statement.RETURN_GENERATED_KEYS)) {
            mapModelToPreparedStatement(preparedStatement, object);
            preparedStatement.executeUpdate();
            try (ResultSet resultSet = preparedStatement.getGeneratedKeys()) {
                if (resultSet.next()) {
                    //object.id = resultSet.getInt(1);
                    object.setId(resultSet.getInt(1));

                } else {
                    throw new SQLException("Model creation failed, no autogenerated ID obtained");
                }
            }
        }
    }

    public List<T> findAll() throws SQLException {
        Connection connection = ConnectionDB.getConnection();
        try (Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(createFindAllQuery())) {
            List<T> models = new ArrayList<>();
            while (resultSet.next()) {
                models.add(mapResultSetToModel(resultSet));
            }
            return models;
        }
    }

    public T findById(int id) throws SQLException {
        Connection connection = ConnectionDB.getConnection();
        try (PreparedStatement preparedStatement = connection.prepareStatement(
                createFindByIdQuery())) {
            preparedStatement.setInt(1, id);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    return mapResultSetToModel(resultSet);
                } else {
                    return null;
                }
            }
        }
    }

    protected String createInsertQuery() {
        return "INSERT INTO " + getTableName() + " (" + createFieldInsertList() + ") VALUES (" + createPlaceholderList() + ")";
    }

    protected String createFindAllQuery() {
        return "SELECT * FROM " + getTableName();
    }

    protected String createFindByIdQuery() {
        return "SELECT * FROM " + getTableName() + " WHERE id=?";
    }













    protected abstract String createFieldInsertList();

    protected abstract String createPlaceholderList();

    protected abstract void mapModelToPreparedStatement(PreparedStatement preparedStatement, T object) throws SQLException;
}